"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–∂–µ–∫ –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨
–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–ª–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—á–µ—Ä–∞, –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
"""
import pandas as pd
import sqlite3
import sys
from datetime import datetime, timedelta
from typing import List, Dict, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'ignore')


def parse_plate_marking(marking: str):
    """–ü–∞—Ä—Å–∏—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –ø–ª–∏—Ç—ã"""
    import re
    pattern = r'–ü–ë\s+(\d+[,.]?\d*)-(\d+[,.]?\d*)-(\d+)'
    match = re.search(pattern, marking)
    
    if not match:
        return None
    
    try:
        length_dm = float(match.group(1).replace(',', '.'))
        length_m = length_dm / 10
        
        width_dm = float(match.group(2).replace(',', '.'))
        width_m = width_dm / 10
        
        load_code = int(match.group(3))
        load_capacity = load_code * 100
        
        return {
            'length': length_m,
            'width': width_m,
            'load_capacity': load_capacity
        }
    except:
        return None


def load_used_plates_from_excel(excel_file: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∏—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è"""
    used_markings = set()
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã Excel —Ñ–∞–π–ª–∞
        excel_data = pd.read_excel(excel_file, sheet_name=None)
        
        for sheet_name, df in excel_data.items():
            if '–î–æ—Ä–æ–∂–∫–∞' in sheet_name or '–†–∞—Å–∫–ª–∞–¥–∫–∞' in sheet_name:
                # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π –ø–ª–∏—Ç
                marking_cols = [col for col in df.columns if '–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞' in col.lower() or '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞' in col.lower()]
                
                for col in marking_cols:
                    if col in df.columns:
                        markings = df[col].dropna().astype(str)
                        used_markings.update(markings)
        
        print(f"[–ó–ê–ì–†–£–ó–ö–ê] –ò–∑ —Ñ–∞–π–ª–∞ {excel_file} –Ω–∞–π–¥–µ–Ω–æ {len(used_markings)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∏—Ç")
        
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç—ã: {e}")
        print(f"[–ò–ù–§–û–†–ú–ê–¶–ò–Ø] –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø–ª–∏—Ç—ã –∏–∑ –±–∞–∑—ã")
    
    return list(used_markings)


def load_available_plates(db_path: str = 'pb.db', used_markings: List[str] = None, min_load: float = 800) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∏—Ç—ã, –∏—Å–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect(db_path)
    
    query = '''
        SELECT 
            "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø–± –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É" as marking,
            "–¥–ª–∏–Ω–∞ –ø–ª–∏—Ç—ã, –º" as length_db,
            "–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∑–∞–∫–∞–∑—á–∏–∫" as customer,
            "–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–∏–∏" as reinforcement,
            "–Ω–µ–¥–µ–ª—è —Ñ–æ—Ä–º–æ–≤–∫–∏" as week
        FROM plity_ex
    '''
    df = pd.read_sql(query, conn)
    conn.close()
    
    if used_markings:
        # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç—ã
        df = df[~df['marking'].isin(used_markings)]
        print(f"[–§–ò–õ–¨–¢–†–ê–¶–ò–Ø] –ò—Å–∫–ª—é—á–µ–Ω–æ {len(used_markings)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∏—Ç")
    
    # –ü–∞—Ä—Å–∏–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ
    parsed = []
    for idx, row in df.iterrows():
        params = parse_plate_marking(row['marking'])
        if params and params['load_capacity'] >= min_load:
            parsed.append({
                'marking': row['marking'],
                'length': params['length'],
                'width': params['width'],
                'load_capacity': params['load_capacity'],
                'customer': row['customer'],
                'reinforcement': row['reinforcement'],
                'week': row['week']
            })
    
    result_df = pd.DataFrame(parsed)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–Ω–µ–¥–µ–ª—è —Ñ–æ—Ä–º–æ–≤–∫–∏)
    if len(result_df) > 0:
        result_df = result_df.sort_values('week', ascending=True).reset_index(drop=True)
    
    return result_df


def find_best_width_combination(plates: pd.DataFrame, target_width: float, gap_cm: float = 1.0):
    """–ü–æ–¥–±–∏—Ä–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–ª–∏—Ç –ø–æ —à–∏—Ä–∏–Ω–µ"""
    gap_m = gap_cm / 100
    target_width_with_gaps = target_width
    
    widths = plates['width'].unique()
    widths = sorted(widths, reverse=True)
    
    best_combination = None
    min_gap = float('inf')
    
    for main_width in widths:
        plates_with_width = plates[plates['width'] == main_width]
        if len(plates_with_width) == 0:
            continue
        
        num_plates = 1
        current_width = main_width
        
        while current_width < target_width_with_gaps and num_plates < 10:
            num_plates += 1
            current_width = num_plates * main_width + (num_plates - 1) * gap_m
        
        gap = abs(current_width - target_width_with_gaps)
        
        if gap < min_gap and len(plates_with_width) >= num_plates:
            min_gap = gap
            best_combination = {
                'width': main_width,
                'count': num_plates,
                'total_width': current_width,
                'gap': gap
            }
    
    return best_combination


def subset_sum_for_length_improved(plates: List[Dict], target_length_cm: int) -> Tuple[List[int], int]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø–ª–∏—Ç –ø–æ –¥–ª–∏–Ω–µ"""
    if not plates:
        return [], 0
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∏—Ç—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º)
    sorted_plates = sorted(plates, key=lambda x: x['length'], reverse=True)
    
    used_plates = []
    current_length_cm = 0
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ç–æ—á–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ —Ü–µ–ª–µ–≤—É—é –¥–ª–∏–Ω—É
    for plate in sorted_plates:
        length_cm = int(plate['length'] * 100)
        if current_length_cm + length_cm <= target_length_cm:
            used_plates.append(plate)
            current_length_cm += length_cm
    
    # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∏—Ç—ã –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω—ã
    if current_length_cm < target_length_cm:
        remaining_cm = target_length_cm - current_length_cm
        for plate in sorted_plates:
            length_cm = int(plate['length'] * 100)
            if length_cm <= remaining_cm:
                used_plates.append(plate)
                current_length_cm += length_cm
                remaining_cm = target_length_cm - current_length_cm
                if remaining_cm <= 0:
                    break
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
    indices = []
    for used_plate in used_plates:
        for i, original_plate in enumerate(plates):
            if (original_plate['marking'] == used_plate['marking'] and 
                original_plate['length'] == used_plate['length'] and
                original_plate['customer'] == used_plate['customer']):
                indices.append(i)
                break
    
    return indices, current_length_cm


def plan_track_for_next_day(length_m: float, width_m: float, plates_df: pd.DataFrame, 
                           gap_cm: float = 1.0, track_num: int = 1):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω—É –¥–æ—Ä–æ–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"""
    
    print(f"\n{'='*70}")
    print(f"üõ§Ô∏è  –î–û–†–û–ñ–ö–ê #{track_num} (–°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨)")
    print(f"{'='*70}")
    
    if len(plates_df) == 0:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return None
    
    # –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
    print(f"üîç –ü–æ–¥–±–∏—Ä–∞—é –ø–ª–∏—Ç—ã –ø–æ —à–∏—Ä–∏–Ω–µ ({width_m} –º)...")
    width_combo = find_best_width_combination(plates_df, width_m, gap_cm)
    
    if not width_combo:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–ª–∏—Ç—ã –ø–æ —à–∏—Ä–∏–Ω–µ!")
        return None
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ –®–∏—Ä–∏–Ω–∞ –ø–ª–∏—Ç—ã: {width_combo['width']} –º")
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç –ø–æ–ø–µ—Ä—ë–∫: {width_combo['count']} —à—Ç")
    print(f"   ‚Ä¢ –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: {width_combo['total_width']:.3f} –º")
    print(f"   ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {width_combo['gap']*100:.1f} —Å–º")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∏—Ç—ã –Ω—É–∂–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    selected_width = width_combo['width']
    plates_filtered = plates_df[plates_df['width'] == selected_width].copy()
    
    if len(plates_filtered) == 0:
        print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç —à–∏—Ä–∏–Ω–æ–π {selected_width} –º")
        return None
    
    print(f"\nüîç –ü–æ–¥–±–∏—Ä–∞—é –ø–ª–∏—Ç—ã –ø–æ –¥–ª–∏–Ω–µ ({length_m} –º)...")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –ø–ª–∏—Ç —à–∏—Ä–∏–Ω–æ–π {selected_width} –º: {len(plates_filtered)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é
    by_reinforcement = {}
    for reinf in plates_filtered['reinforcement'].unique():
        if pd.isna(reinf):
            continue
        group = plates_filtered[plates_filtered['reinforcement'] == reinf]
        by_reinforcement[str(reinf)] = group.to_dict('records')
    
    # –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
    best_layout = None
    best_coverage = 0
    
    for reinf, plates_list in by_reinforcement.items():
        if len(plates_list) < width_combo['count']:
            continue
        
        target_length_cm = int(length_m * 100)
        indices, achieved_cm = subset_sum_for_length_improved(plates_list, target_length_cm)
        
        coverage_ratio = achieved_cm / target_length_cm if target_length_cm > 0 else 0
        
        if (achieved_cm > best_coverage or 
            (achieved_cm == best_coverage and coverage_ratio > (best_layout.get('coverage_ratio', 0) if best_layout else 0))):
            best_coverage = achieved_cm
            best_layout = {
                'reinforcement': reinf,
                'plates': [plates_list[i] for i in indices],
                'achieved_cm': achieved_cm,
                'achieved_m': achieved_cm / 100,
                'gap_m': length_m - achieved_cm / 100,
                'coverage_ratio': coverage_ratio,
                'total_plates_available': len(plates_list)
            }
    
    if not best_layout:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–ª–∏—Ç—ã –ø–æ –¥–ª–∏–Ω–µ!")
        return None
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞:")
    print(f"   ‚Ä¢ –ê—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ: {best_layout['reinforcement']}")
    print(f"   ‚Ä¢ –ü–ª–∏—Ç –≤–¥–æ–ª—å –¥–æ—Ä–æ–∂–∫–∏: {len(best_layout['plates'])} —à—Ç")
    print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∞—è –¥–ª–∏–Ω–∞: {best_layout['achieved_m']:.2f} –º")
    print(f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {best_layout['gap_m']*100:.0f} —Å–º")
    if 'coverage_ratio' in best_layout:
        print(f"   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {best_layout['coverage_ratio']*100:.1f}%")
    if 'total_plates_available' in best_layout:
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–ª–∏—Ç —ç—Ç–æ–≥–æ —Ç–∏–ø–∞: {best_layout['total_plates_available']} —à—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∫–∏
    used_weeks = [p['week'] for p in best_layout['plates']]
    unique_weeks = sorted(set(used_weeks))
    print(f"   ‚Ä¢ –ù–µ–¥–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∫–∏: {', '.join(map(str, unique_weeks[:5]))}")
    
    total_plates = len(best_layout['plates']) * width_combo['count']
    
    result = {
        'track_num': track_num,
        'length_m': length_m,
        'width_m': width_m,
        'width_combo': width_combo,
        'length_layout': best_layout,
        'total_plates': total_plates,
    }
    
    print(f"\n‚úÖ –î–æ—Ä–æ–∂–∫–∞ #{track_num} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å!")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–ª–∏—Ç: {total_plates} —à—Ç")
    
    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"""
    print("=" * 70)
    print("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–û–†–û–ñ–ï–ö –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    length_m = 101  # –º–µ—Ç—Ä—ã
    width_m = 3.6   # –º–µ—Ç—Ä—ã
    min_load = 800  # –∫–≥/–º2
    gap_cm = 1.0    # —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã
    num_tracks = 3  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–µ–∫
    
    # –§–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–ª–∏—Ç–∞–º–∏ (–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å)
    yesterday_excel = "—Ä–∞—Å–∫–ª–∞–¥–∫–∞_3_–¥–æ—Ä–æ–∂–∫–∏_101x3.6.xlsx"
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞: {(datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')}")
    print(f"üìã –ò—Å–∫–ª—é—á–∞–µ–º –ø–ª–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {yesterday_excel}")
    print(f"üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Ä–æ–∂–µ–∫: {length_m}–º √ó {width_m}–º")
    print(f"‚öñÔ∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {min_load} –∫–≥/–º2")
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç—ã
    print("[–®–ê–ì 1] –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—á–µ—Ä–∞...")
    used_markings = load_used_plates_from_excel(yesterday_excel)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∏—Ç—ã
    print("\n[–®–ê–ì 2] –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∏—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    available_plates = load_available_plates(
        db_path='pb.db', 
        used_markings=used_markings, 
        min_load=min_load
    )
    
    if len(available_plates) == 0:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å!")
        return
    
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø–ª–∏—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è: {len(available_plates)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–µ–¥–µ–ª—è–º
    week_counts = available_plates['week'].value_counts().sort_index()
    print("\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç –ø–æ –Ω–µ–¥–µ–ª—è–º —Ñ–æ—Ä–º–æ–≤–∫–∏:")
    for week, count in week_counts.head(10).items():
        print(f"   –ù–µ–¥–µ–ª—è {week}: {count} –ø–ª–∏—Ç")
    if len(week_counts) > 10:
        print(f"   ... –∏ –µ—â—ë {len(week_counts)-10} –Ω–µ–¥–µ–ª—å")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ—Ä–æ–∂–∫–∏
    print(f"\n[–®–ê–ì 3] –ü–ª–∞–Ω–∏—Ä—É—é {num_tracks} –¥–æ—Ä–æ–∂–µ–∫...")
    results = []
    
    for track_num in range(1, num_tracks + 1):
        if len(available_plates) == 0:
            print(f"\n‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–ª–∏—Ç –¥–ª—è –¥–æ—Ä–æ–∂–∫–∏ #{track_num}")
            break
        
        result = plan_track_for_next_day(length_m, width_m, available_plates, gap_cm, track_num)
        
        if result:
            results.append(result)
            
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            used_markings_this_track = set(p['marking'] for p in result['length_layout']['plates'])
            available_plates = available_plates[~available_plates['marking'].isin(used_markings_this_track)].reset_index(drop=True)
            
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç: {len(available_plates)} —à—Ç")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ä–æ–∂–∫—É #{track_num}")
            break
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    if results:
        print(f"\n" + "=" * 70)
        print("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê - –ü–õ–ê–ù –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨")
        print("=" * 70)
        print(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Ä–æ–∂–µ–∫: {len(results)} –∏–∑ {num_tracks}")
        
        total_plates = sum(r['total_plates'] for r in results)
        total_area = sum(r['length_m'] * r['width_m'] for r in results)
        
        print(f"üì¶ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–ª–∏—Ç: {total_plates} —à—Ç")
        print(f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è: {total_area:.2f} –º2")
        print(f"‚öñÔ∏è  –ü—Ä–∏–º–µ—Ä–Ω–∞—è –º–∞—Å—Å–∞: ~{total_plates * 0.6:.0f} —Ç–æ–Ω–Ω")
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –¥–æ—Ä–æ–∂–∫–∞–º:")
        for result in results:
            layout = result['length_layout']
            print(f"   ‚Ä¢ –î–æ—Ä–æ–∂–∫–∞ #{result['track_num']}: {result['total_plates']} –ø–ª–∏—Ç, "
                  f"–ø–æ–∫—Ä—ã—Ç–∏–µ {layout['achieved_m']:.2f}–º, "
                  f"—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {layout['coverage_ratio']*100:.1f}%")
        
        print(f"\nüíæ –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å...")
        
        # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
        filename = f"–ø–ª–∞–Ω_–Ω–∞_—Å–ª–µ–¥—É—é—â–∏–π_–¥–µ–Ω—å_{len(results)}_–¥–æ—Ä–æ–∂–∫–∏.xlsx"
        
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
            summary_rows = []
            for result in results:
                layout = result['length_layout']
                used_weeks = [p['week'] for p in layout['plates']]
                unique_weeks = sorted(set(used_weeks))
                weeks_str = ', '.join(map(str, unique_weeks[:10]))
                
                summary_rows.append({
                    '–î–æ—Ä–æ–∂–∫–∞': f"#{result['track_num']}",
                    '–î–ª–∏–Ω–∞, –º': result['length_m'],
                    '–®–∏—Ä–∏–Ω–∞, –º': result['width_m'],
                    '–í—Å–µ–≥–æ –ø–ª–∏—Ç': result['total_plates'],
                    '–ê—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ': layout['reinforcement'],
                    '–ü–æ–∫—Ä—ã—Ç–æ, –º': layout['achieved_m'],
                    '–û—Å—Ç–∞—Ç–æ–∫, —Å–º': round(layout['gap_m'] * 100),
                    '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, %': round(layout['coverage_ratio'] * 100, 1),
                    '–ù–µ–¥–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∫–∏': weeks_str
                })
            
            summary_df = pd.DataFrame(summary_rows)
            summary_df.to_excel(writer, sheet_name='üìä –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞', index=False)
            
            # –ö–∞–∂–¥–∞—è –¥–æ—Ä–æ–∂–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
            for result in results:
                track_num = result['track_num']
                layout = result['length_layout']
                width_combo = result['width_combo']
                
                rows = []
                for i, plate in enumerate(layout['plates'], 1):
                    for j in range(width_combo['count']):
                        rows.append({
                            '‚Ññ': len(rows) + 1,
                            '–ü–æ–∑–∏—Ü–∏—è –≤–¥–æ–ª—å': i,
                            '–ü–æ–∑–∏—Ü–∏—è –ø–æ–ø–µ—Ä—ë–∫': j + 1,
                            '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞': plate['marking'],
                            '–î–ª–∏–Ω–∞, –º': plate['length'],
                            '–®–∏—Ä–∏–Ω–∞, –º': plate['width'],
                            '–ù–∞–≥—Ä—É–∑–∫–∞, –∫–≥/–º2': plate['load_capacity'],
                            '–ê—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ': plate['reinforcement'],
                            '–ó–∞–∫–∞–∑—á–∏–∫': plate['customer'],
                            '–ù–µ–¥–µ–ª—è —Ñ–æ—Ä–º–æ–≤–∫–∏': plate['week']
                        })
                
                df = pd.DataFrame(rows)
                sheet_name = f"–î–æ—Ä–æ–∂–∫–∞ #{track_num}"
                df.to_excel(writer, sheet_name=sheet_name, index=False)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        print(f"   üìë –õ–∏—Å—Ç–æ–≤: {len(results) + 1} (–ø–ª–∞–Ω + {len(results)} –¥–æ—Ä–æ–∂–∫–∏)")
        
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å!")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∏—Ç –∏–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")


if __name__ == "__main__":
    main()



